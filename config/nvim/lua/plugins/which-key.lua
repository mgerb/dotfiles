return {
	"folke/which-key.nvim",
	event = "VeryLazy",
	opts = {
		-- your configuration comes here
		-- or leave it empty to use the default settings
		-- refer to the configuration section below
	},
	config = function()
		vim.o.timeout = true
		vim.o.timeoutlen = 300
	end,
	keys = {
		{ "<leader>?", "<cmd>lua require('dapui').eval(nil, { enter = true })<cr>", desc = "DAP Eval" },
		{ "<leader>A", "<cmd>:AerialOpen<cr>", desc = "Aerial" },
		{ "<leader>B", "<cmd>:DapToggleBreakpoint<cr>", desc = "DAP Toggle Breakpoint" },
		{
			"<leader>F",
			"<cmd>lua require('telescope').extensions.live_grep_args.live_grep_args({theme = require('mg.custom.telescope').get_my_theme()})<cr>",
			desc = "Live Grep",
		},
		{ "<leader>H", "<cmd>:%!xxd<cr><cmd>:setlocal ft=xxd<cr>", desc = "Hex View" },
		{ "<leader>Q", "<cmd>:qa!<cr>", desc = "Quit All Force" },
		{ "<leader>T", group = "Telescope" },
		{ "<leader>TC", "<cmd>Telescope command_history<cr>", desc = "Command History" },
		{ "<leader>Tc", "<cmd>Telescope commands<cr>", desc = "Commands" },
		{ "<leader>Th", "<cmd>Telescope help_tags<cr>", desc = "Help Tags" },
		{ "<leader>Tk", "<cmd>Telescope keymaps<cr>", desc = "Keymaps" },
		{ "<leader>a", group = "Angular Scripts" },
		{
			"<leader>aS",
			"<cmd>lua require('mg.custom.angular').jump_to_angular_component_part('spec%.ts')<cr>",
			desc = "Test",
		},
		{
			"<leader>ac",
			"<cmd>lua require('mg.custom.angular').jump_to_angular_component_part('ts')<cr>",
			desc = "Component",
		},
		{ "<leader>ag", group = "Generate" },
		{
			"<leader>agC",
			"<cmd>lua require('mg.custom.nx').run_nx_generator('component-store')<cr>",
			desc = "Component Store",
		},
		{ "<leader>agc", "<cmd>lua require('mg.custom.nx').run_nx_generator('component')<cr>", desc = "Component" },
		{ "<leader>agd", "<cmd>lua require('mg.custom.nx').run_nx_generator('directive')<cr>", desc = "Directive" },
		{ "<leader>agp", "<cmd>lua require('mg.custom.nx').run_nx_generator('pipe')<cr>", desc = "Pipe" },
		{ "<leader>ags", "<cmd>lua require('mg.custom.nx').run_nx_generator('service')<cr>", desc = "Service" },
		{ "<leader>aj", group = "Jesting" },
		{ "<leader>ajf", "<cmd>JestingAttachNx<cr>", desc = "Attach to File" },
		{ "<leader>ajt", "<cmd>JestingAttachSingleTestNx<cr>", desc = "Attach to Single Test" },
		{ "<leader>aju", "<cmd>JestingUnattach<cr>", desc = "Unattach from Test" },
		{ "<leader>am", "<cmd>lua require('mg.custom.angular').jump_to_nearest_module()<cr>", desc = "Module" },
		{
			"<leader>as",
			"<cmd>lua require('mg.custom.angular').jump_to_angular_component_part('scss')<cr>",
			desc = "SCSS",
		},
		{
			"<leader>at",
			"<cmd>lua require('mg.custom.angular').jump_to_angular_component_part('html')<cr>",
			desc = "HTML",
		},
		{ "<leader>ax", group = "NGRX" },
		{
			"<leader>axa",
			"<cmd>lua require('mg.custom.angular').jump_to_ngrx_parts('actions')<cr>",
			desc = "NGRX Actions",
		},
		{
			"<leader>axe",
			"<cmd>lua require('mg.custom.angular').jump_to_ngrx_parts('effects')<cr>",
			desc = "NGRX Effects",
		},
		{
			"<leader>axf",
			"<cmd>lua require('mg.custom.angular').jump_to_ngrx_parts('facade')<cr>",
			desc = "NGRX Facade",
		},
		{
			"<leader>axr",
			"<cmd>lua require('mg.custom.angular').jump_to_ngrx_parts('reducer')<cr>",
			desc = "NGRX Reducer",
		},
		{
			"<leader>axs",
			"<cmd>lua require('mg.custom.angular').jump_to_ngrx_parts('selectors')<cr>",
			desc = "NGRX Selectors",
		},
		{ "<leader>b", "<cmd>:Telescope buffers<cr>", desc = "Buffers" },
		{ "<leader>c", "<cmd>:bdelete<cr>", desc = "Close" },
		{ "<leader>d", group = "Diffview" },
		{ "<leader>dc", "<cmd>DiffviewClose<cr>", desc = "Close" },
		{ "<leader>dd", "<cmd>DiffviewOpen<cr>", desc = "Open" },
		{ "<leader>df", "<cmd>DiffviewFileHistory %<cr>", desc = "File History" },
		{ "<leader>dh", "<cmd>DiffviewOpen HEAD~1<cr>", desc = "Open HEAD~1" },
		{ "<leader>dl", "<cmd>DiffviewLog<cr>", desc = "Log" },
		{ "<leader>dr", "<cmd>DiffviewRefresh<cr>", desc = "Refresh" },
		{ "<leader>dt", "<cmd>DiffviewToggleFiles<cr>", desc = "Toggle Files" },
		{ "<leader>e", "<cmd>lua vim.diagnostic.open_float({focusable = true})<cr>", desc = "Open Diagnostics" },
		{
			"<leader>f",
			"<cmd>lua require('telescope.builtin').find_files(require('mg.custom.telescope').get_my_theme())<cr>",
			desc = "Find files",
		},
		{ "<leader>g", group = "Git" },
		{ "<leader>gB", "<cmd>Gitsigns blame_line<cr>", desc = "Blame Line" },
		{ "<leader>gR", "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", desc = "Reset Buffer" },
		{ "<leader>gS", "<cmd>Telescope git_stash<cr>", desc = "Stashes" },
		{ "<leader>gb", "<cmd>Telescope git_branches<cr>", desc = "Branches" },
		{ "<leader>gc", "<cmd>Telescope git_commits<cr>", desc = "Commits" },
		{ "<leader>gd", "<cmd>Gitsigns diffthis HEAD<cr>", desc = "Diff" },
		{ "<leader>gj", "<cmd>lua require 'gitsigns'.next_hunk()<cr>", desc = "Next Hunk" },
		{ "<leader>gk", "<cmd>lua require 'gitsigns'.prev_hunk()<cr>", desc = "Prev Hunk" },
		{ "<leader>gr", "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", desc = "Reset Hunk" },
		{ "<leader>gs", "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", desc = "Stage Hunk" },
		{ "<leader>gt", "<cmd>Telescope git_status<cr>", desc = "Status" },
		{ "<leader>gu", "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>", desc = "Undo Stage Hunk" },
		{ "<leader>h", group = "Harpoon" },
		{ "<leader>h1", "<cmd> lua require 'harpoon.term'.gotoTerminal(1)<cr>", desc = "Terminal 1" },
		{ "<leader>h2", "<cmd> lua require 'harpoon.term'.gotoTerminal(2)<cr>", desc = "Terminal 2" },
		{ "<leader>h3", "<cmd> lua require 'harpoon.term'.gotoTerminal(3)<cr>", desc = "Terminal 3" },
		{ "<leader>ha", "<cmd> lua require 'harpoon.mark'.add_file()<cr>", desc = "Add File" },
		{ "<leader>hc", "<cmd> lua require 'harpoon.cmd-ui'.toggle_quick_menu()<cr>", desc = "CMD Commands" },
		{ "<leader>hh", "<cmd> lua require 'harpoon.ui'.toggle_quick_menu()<cr>", desc = "Menu" },
		{ "<leader>l", group = "LSP" },
		{ "<leader>lD", "<cmd>lua require('telescope.builtin').diagnostics()<cr>", desc = "Diagnostics (All)" },
		{ "<leader>lS", "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>", desc = "Workspace Symbols" },
		{ "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>", desc = "Code Action" },
		{
			"<leader>ld",
			"<cmd>lua require('telescope.builtin').diagnostics({bufnr=0})<cr>",
			desc = "Diagnostics (File)",
		},
		{
			"<leader>lf",
			"<cmd>lua require('conform').format({ async = true, lsp_fallback = true })<cr>",
			desc = "Format",
		},
		{ "<leader>li", "<cmd>LspInfo<cr>", desc = "Info" },
		{ "<leader>lm", "<cmd>Mason<cr>", desc = "Mason" },
		{ "<leader>lq", "<cmd>lua vim.diagnostic.setloclist()<cr>", desc = "Quickfix" },
		{ "<leader>lr", "<cmd>lua vim.lsp.buf.rename()<cr>", desc = "Rename" },
		{ "<leader>ls", "<cmd>Telescope lsp_document_symbols<cr>", desc = "Document Symbols" },
		{ "<leader>m", group = "MG Scripts" },
		{ "<leader>md", "<cmd>MetricsDebug<cr>", desc = "Metrics Debug" },
		{ "<leader>mo", "<cmd>MGTSOrganizeImports<cr>", desc = "TS Organize Imports" },
		{ "<leader>mt", "<cmd>MetricsGetTime<cr>", desc = "Metrics Get Time" },
		{ "<leader>n", group = "Tree" },
		{ "<leader>nc", "<cmd>NvimTreeCollapse<cr>", desc = "Collapse" },
		{ "<leader>ne", "<cmd>:NvimTreeToggle<cr>", desc = "Toggle" },
		{ "<leader>nr", "<cmd>NvimTreeRefresh<cr>", desc = "Refresh" },
		{ "<leader>o", "<cmd>Oil<cr>", desc = "Oil" },
		{ "<leader>p", "<cmd>Lazy<cr>", desc = "Package Manager" },
		{ "<leader>q", "<cmd>:q<cr>", desc = "Quit" },
		{ "<leader>r", "<cmd>Telescope resume<cr>", desc = "Resume" },
		{ "<leader>t", "<cmd>tabnew<cr>", desc = "New Tab" },
		{ "<leader>u", "<cmd>:UndotreeToggle<cr>", desc = "Undo Tree" },
		{ "<leader>v", "<cmd>vs<cr>", desc = "V Split" },
		{ "<leader>w", "<cmd>:w<cr>", desc = "Write" },
		{ "<leader>x", "<cmd>:%bd<cr>", desc = "Close All Buffers" },
	},
}
